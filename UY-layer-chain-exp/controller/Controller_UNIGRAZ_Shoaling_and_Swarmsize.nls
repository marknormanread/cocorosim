; CONTROLLER DESCRIPTION

; This controller has several parts that are used to demonstrate local cognition in a swarm of AUVs.
; It is meant to be used in a large, bordered tank where the AUVs are initially randomly distributed.
; The AUVs use a basic border-collision-avoidance and swim around randomly.
; As soon as they are in the (short) range of the simulated blue-light sensor of other near AUVs, they try to stay close to them and form a shoal that also swims around randomly.
; This usually leads to the aggregation of most AUVs to one big shoal.
; Inside this shoal (but also when they are alone), the AUVs try to find out the size of their shoal by broadcasting short information packages about their locally percepted swarm.
; The spreading of this local information throughout the shoal then allows each member of the shoal to have a good estimate of the "real" shoal size.
; Outlook: Once the shoal size is above a certain threshold (e.g. 75% of all AUVs) the shoal can then change its behaviour to whatever is needed in the scenario.




to Controller-setup


set list-of-internal-values-confinement lput 0 list-of-internal-values-confinement ; after the creation of the distance-to-basestation sensor, the internal "previous tick" integer value of the sensor has to be set.   
set list-of-internal-values-swarmsizeID [] ; swarmsizeID list initialized
set label-color black

end


to Controller-update ; empty controller with the following parts: 
                     ; - performing the standard forward motion (both thrusters 75% forward)
                     ; - trying to avoid near borders
                     ; - trying to avoid AUV collisions
                     ; - using a correlated random walk
                     ; - keeping the AUV below a certain depth
                     ; - keeping the AUVs above the ground
  
  ; all sensor information in integers                   
  let passive-distance-front item 0 list-of-sensor-integer-values
  let passive-distance-right item 1 list-of-sensor-integer-values
  let passive-distance-back item 2 list-of-sensor-integer-values
  let passive-distance-left item 3 list-of-sensor-integer-values
  let passive-distance-up item 4 list-of-sensor-integer-values  
  let passive-distance-down item 5 list-of-sensor-integer-values  
  
  let active-distance-front item 6 list-of-sensor-integer-values  
  let active-distance-right item 7 list-of-sensor-integer-values  
  let active-distance-back item 8 list-of-sensor-integer-values
  let active-distance-left item 9 list-of-sensor-integer-values  
  
  let distance-to-ground item 10 list-of-sensor-integer-values
  let depth-pressure item 11 list-of-sensor-integer-values ; IMPORTANT: As of now, "depth" is the distance to the water surface (=pressure), so a higher value really means a deeper AUV.
  let number-of-near-robots item 12 list-of-sensor-integer-values
 
 
  controller-standard-forward-motion ; 75% forward motion
 
  ; border avoidance; leads to a counter-clockwise rotation of the AUVs after a while
  ifelse (active-distance-front > 0) ; when there is an obstacle/wall inside the frontal active sensor range
    [ 
    ifelse (active-distance-front > 0)
      [ controller-actuator-left-stop] ; if the border is *very* close always turn soft. 
      [ controller-actuator-left-decrease controller-actuator-left-decrease] ; if the border is not as close, turn soft left; 
    ]  
    
    [ ; when AUV observes nothing in front
    ifelse ((active-distance-right > 0) and (active-distance-left > 0)) 
       [ controller-actuator-left-stop] ; if there are close borders to both sides (e.g. corners), then make a hard left turn
       [ ; if only one side sensor perceives an object
       ifelse (active-distance-right > 0) ; if AUV observes object to right
         [controller-actuator-left-decrease] ; soft turn left
         [ ; if no object to the right
         ifelse (active-distance-left > 0) ; if AUV observes object to left
           [controller-actuator-right-decrease] ; soft turn right
           [ ; if no objects were perceived
           ; AUV collision avoidance
           ifelse (passive-distance-front > 150) ; when there is a very near AUV in front
             [controller-actuator-left-stop controller-actuator-right-stop controller-actuator-left-increase] ; stop thrusters when there is another AUV very close in front; increase left thruster to make a slow right turn
             [ ; if there is no AUV near in front
             ; SHOALING PART: very rough, will be improved in the future
             ifelse (passive-distance-front >= 180) [controller-actuator-left-increase controller-actuator-left-increase controller-actuator-right-decrease] ;robot ahead too near -> turn right  
               [
               if ((passive-distance-left > passive-distance-right) and (passive-distance-left >= 180)) [controller-actuator-left-increase controller-actuator-right-decrease] ;robot left too near    
               if (passive-distance-right >= 180) [controller-actuator-right-increase controller-actuator-left-decrease] ;robot right too near -> turn left
               if ((passive-distance-left > 0) and (passive-distance-left <= 120)) [controller-actuator-right-increase controller-actuator-left-decrease] ;robot left too far
               if ((passive-distance-right > 0) and (passive-distance-right <= 120)) [controller-actuator-left-increase controller-actuator-right-decrease] ;robot right too far                                
               if ((passive-distance-back > 0) and (passive-distance-back <= 80)) [controller-actuator-left-increase controller-actuator-left-increase controller-actuator-right-decrease] ;robot behind too far -> turn         
               ]              
               if (not any? near-robots) ; if alone
                 [
                 ifelse (random-float 1.0 < 0.5) ; randomized soft turn; "correlated random walk"
                   [controller-actuator-left-increase] ; turn either right (50% chance)
                   [controller-actuator-right-increase] ; or left (50% chance)
                 ]
             ]
           ]       
         ]
       ]     
     ]   
  ; after all avoidance behaviours
  ; keep a certain depth
  if (depth-pressure < 125)   [controller-buoyancy-sink] ;; (note that depth-pressure is the distance from the water surface) AUV is getting too high (or pressure too low) -> AUV should sink
  if (distance-to-ground > 0) [controller-buoyancy-rise] ;; AUV is getting too close to the ground -> AUV should rise


controller-update-swarmsize-ID
      
end


to controller-standard-forward-motion
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values 96) ; ~75% forward speed for left thruster
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values 96) ; ~75% forward speed for right thruster
end


to controller-actuator-left-increase
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values (item 0 list-of-actuator-integer-values + 16)) ; increase forward speed for left thruster  
end


to controller-actuator-right-increase
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values (item 1 list-of-actuator-integer-values + 16)) ; increase forward speed for right thruster    
end


to controller-actuator-left-decrease
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values (item 0 list-of-actuator-integer-values - 16)) ; increase forward speed for left thruster  
end


to controller-actuator-right-decrease
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values (item 1 list-of-actuator-integer-values - 16)) ; increase forward speed for right thruster    
end



to controller-actuator-left-stop  
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values 0) ; set forward speed for left thruster to 0    
end


to controller-actuator-right-stop
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values 0) ; set forward speed for right thruster to 0
end


to controller-buoyancy-sink
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values -64) ; set buoyancy to sink at half speed
end


to controller-buoyancy-rise
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values 64) ; set buoyancy to rise at half speed
end


to controller-buoyancy-stay
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values 0) ; set buoyancy to remain at current depth
end



to controller-update-swarmsize-ID

; first, update the information about myself (always the same)
let mypacket []
set mypacket (sentence who [34 0])
set list-of-internal-values-swarmsizeID fput mypacket list-of-internal-values-swarmsizeID

let listlength (length list-of-internal-values-swarmsizeID) 

; go through the list
let m 0
while [m < listlength]
  [
  let thiswho (item 0 (item m list-of-internal-values-swarmsizeID))
  let thiscountdown (item 1 (item m list-of-internal-values-swarmsizeID))
  let thishopcount (item 2 (item m list-of-internal-values-swarmsizeID))

; second, decrease the countdown of all packages  
  set list-of-internal-values-swarmsizeID replace-item m list-of-internal-values-swarmsizeID (sentence thiswho (thiscountdown - 1) thishopcount)    
  
; third, remove packages which are too old (countdown < 0)
  if (thiscountdown <= 0) 
    [
    set list-of-internal-values-swarmsizeID remove-item m list-of-internal-values-swarmsizeID 
    set listlength (length list-of-internal-values-swarmsizeID)
    ] 
  set m m + 1
  ]

; fourth, sort the list by AUV IDs
set list-of-internal-values-swarmsizeID sort-by [(item 0 ?1) < (item 0 ?2)] list-of-internal-values-swarmsizeID 

; fifth, sort the list again by countdowns (AUV IDs still sorted!)
set list-of-internal-values-swarmsizeID sort-by [((item 0 ?1) = (item 0 ?2)) and ((item 1 ?1) > (item 1 ?2))] list-of-internal-values-swarmsizeID 

set listlength (length list-of-internal-values-swarmsizeID) 

; go through the list again
let n 0 
while [n < (listlength - 1)] 
  [
  let thispacket (item n list-of-internal-values-swarmsizeID)
  let nextpacket (item (n + 1) list-of-internal-values-swarmsizeID)
  let thiswho (item 0 (item n list-of-internal-values-swarmsizeID))
  let thiscountdown (item 1 (item n list-of-internal-values-swarmsizeID))
  let nextwho (item 0 (item (n + 1) list-of-internal-values-swarmsizeID))
  let nextcountdown (item 1 (item (n + 1) list-of-internal-values-swarmsizeID))
  let thishopcount (item 2 (item n list-of-internal-values-swarmsizeID))
 
; sixth, replace "older" information about the same AUV by newer information about the same AUV      
  if (thiswho =  nextwho) 
    [
    ifelse (thiscountdown >= nextcountdown) 
      [
      set list-of-internal-values-swarmsizeID replace-item (n + 1) list-of-internal-values-swarmsizeID thispacket 
      ]
      [
      set list-of-internal-values-swarmsizeID replace-item n list-of-internal-values-swarmsizeID nextpacket ; because the list was sorted before, this should not be mandatory        
      ] 
    ]
    set n n + 1
  ]
  
; seventh, remove duplicate information    
set list-of-internal-values-swarmsizeID remove-duplicates list-of-internal-values-swarmsizeID
;print who
;print list-of-internal-values-swarmsizeID
;print " "

; eigth, determine swarmsize
let myswarmsize (length list-of-internal-values-swarmsizeID)

; do something, e.g. set color (or aggregate):  
set color (45 + (5 * (myswarmsize / (number-of-all-robots + 1)))) ; AUV changes color depending on how many other AUVs are in the (connected) swarm
set label myswarmsize
;if (color > 50) [controller-actuator-left-stop controller-actuator-right-stop controller-buoyancy-stay] ; if more than 60/255= 23,5% of all other AUVs-DUMMY are seen, stop
;if (color > 50) [set color 65] ; keep same color if stopped

; ninth, send own swarmsize information to all other AUVs in range;   
if (random 6 = 0)
  [
  set color red
  ask near-robots 
    [    
    set list-of-internal-values-swarmsizeID sentence ([list-of-internal-values-swarmsizeID] of myself) list-of-internal-values-swarmsizeID  
    ]  
  ]
  
end