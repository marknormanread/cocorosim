

to Controller-setup


set list-of-internal-values-confinement lput 0 list-of-internal-values-confinement ; after the creation of the distance-to-basestation sensor, the internal "previous tick" integer value of the sensor has to be set.   
set test-confinement 0

end


to Controller-update ; empty controller with the following parts: 
                     ; - performing the standard forward motion (both thrusters 75% forward)
                     ; - trying to avoid near borders
                     ; - trying to avoid AUV collisions
                     ; - using a correlated random walk
                     ; - keeping the AUV below a certain depth
                     ; - keeping the AUVs above the ground
                     ;asdinasdiln
  
  ; all sensor information in integers                   
  let passive-distance-front item 0 list-of-sensor-integer-values
  let passive-distance-right item 1 list-of-sensor-integer-values
  let passive-distance-back item 2 list-of-sensor-integer-values
  let passive-distance-left item 3 list-of-sensor-integer-values
  let passive-distance-up item 4 list-of-sensor-integer-values  
  let passive-distance-down item 5 list-of-sensor-integer-values  
  
  let active-distance-front item 6 list-of-sensor-integer-values  
  let active-distance-right item 7 list-of-sensor-integer-values  
  let active-distance-back item 8 list-of-sensor-integer-values
  let active-distance-left item 9 list-of-sensor-integer-values  
  
  let distance-to-ground item 10 list-of-sensor-integer-values
  let depth-pressure item 11 list-of-sensor-integer-values ; IMPORTANT: As of now, "depth" is the distance to the water surface (=pressure), so a higher value really means a deeper AUV.
  let number-of-near-robots item 12 list-of-sensor-integer-values
 
  let distance-to-basestation-new item 13 list-of-sensor-integer-values ; this sensor value is only useful in comparison to the old value, thus the next two lines are neccesary
  let distance-to-basestation-old item 0 list-of-internal-values-confinement ; old distance to basestation is needed to decide whether AUV moves closer or farther away from the basestation 
  set list-of-internal-values-confinement replace-item 0 list-of-internal-values-confinement distance-to-basestation-new  ; the actual value is internally stored for the calculations in the next tick
  
  
  controller-standard-forward-motion ; 75% forward motion
  
    
  if (confinement-behaviour?) ; if the confinement-behaviour is set to TRUE in the experiment.nls, then the AUVs try to stay within a certain distance to the basestation.
  [
    if ((distance-to-basestation-new > 175) and (distance-to-basestation-new > distance-to-basestation-old)) 
    [
      controller-actuator-left-decrease ( 60 + random 40 )
      set test-confinement 1
    ];controller-actuator-left-decrease controller-actuator-left-decrease]
    if ( (distance-to-basestation-new > 250) and (test-confinement = 1) )
    [
      set color red
      ;die
    ]
     ; If the distance gets larger than 175/255=70% of the acoustic distance sensor range, AND if the distance has become larger since the last tick, then make a soft left turn     
  ]

 
  ; border avoidance; leads to a counter-clockwise rotation of the AUVs after a while
  ifelse (active-distance-front > 0) ; when there is an obstacle/wall inside the frontal active sensor range
    [ 
    ifelse (active-distance-front > 150)
      [ controller-actuator-left-stop] ; if the border is *very* close always turn soft. 
      [ controller-actuator-left-decrease 40 ] ; if the border is not as close, turn soft left; 
    ]  
    
    [ ; when AUV observes nothing in front
    ifelse ((active-distance-right > 0) and (active-distance-left > 0)) 
       [ controller-actuator-left-stop] ; if there are close borders to both sides (e.g. corners), then make a hard left turn
       [ ; if only one side sensor perceives an object
       ifelse (active-distance-right > 0) ; if AUV observes object to right
         [controller-actuator-left-decrease 20] ; soft turn left
         [ ; if no object to the right
         ifelse (active-distance-left > 0) ; if AUV observes object to left
           [controller-actuator-right-decrease 20] ; soft turn right
           [ ; if no objects were perceived
           ; AUV collision avoidance
           ifelse (passive-distance-front > 150) ; when there is a very near AUV in front
             [controller-actuator-left-stop controller-actuator-right-stop controller-actuator-left-increase 20] ; stop thrusters when there is another AUV very close in front; increase left thruster to make a slow right turn
             [ ; if there is not AUV near in front
             ifelse (random-float 1.0 < 0.5) ; randomized soft turn; "correlated random walk"
               [controller-actuator-left-increase 20] ; turn either right (50% chance)
               [controller-actuator-right-increase 20] ; or left (50% chance)
             ]
           ]       
         ]
       ]     
     ]   
  ; after all avoidance behaviours
  ; keep a certain depth
  ;if (depth-pressure < 125)   [controller-buoyancy-sink] ;; (note that depth-pressure is the distance from the water surface) AUV is getting too high (or pressure too low) -> AUV should sink
  if (distance-to-ground > 0) [controller-buoyancy-rise] ;; AUV is getting too close to the ground -> AUV should rise
      
end


to controller-standard-forward-motion
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values 100) ; ~75% forward speed for left thruster
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values 100) ; ~75% forward speed for right thruster
end


to controller-actuator-left-increase [ amount ]
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values (item 0 list-of-actuator-integer-values + amount)) ; increase forward speed for left thruster  
end


to controller-actuator-right-increase [ amount ]
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values (item 1 list-of-actuator-integer-values + amount)) ; increase forward speed for right thruster    
end


to controller-actuator-left-decrease [ amount ]
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values (item 0 list-of-actuator-integer-values - amount)) ; decrease forward speed for left thruster  
end


to controller-actuator-right-decrease [ amount ]
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values (item 1 list-of-actuator-integer-values - amount)) ; decrease forward speed for right thruster    
end



to controller-actuator-left-stop  
  set list-of-actuator-integer-values (replace-item 0 list-of-actuator-integer-values 0) ; set forward speed for left thruster to 0    
end


to controller-actuator-right-stop
  set list-of-actuator-integer-values (replace-item 1 list-of-actuator-integer-values 0) ; set forward speed for right thruster to 0
end


to controller-buoyancy-sink
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values 77) ; set buoyancy to sink at half speed
end


to controller-buoyancy-rise
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values 177) ; set buoyancy to rise at half speed
end


to controller-buoyancy-stay
  set list-of-actuator-integer-values (replace-item 2 list-of-actuator-integer-values 127) ; set buoyancy to remain at current depth
end