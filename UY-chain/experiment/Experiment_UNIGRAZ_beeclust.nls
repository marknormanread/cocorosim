; Experimentation user file
 
globals [  
  water-level 
  make-ground-terrain? 
  make-ground-dell?
  make-borders? 
  make-watersurface? 
  stop-on-obstacle-collisions?
  print-AUV-collisions?
  confinement-behaviour?
  use-blackbox?
]


to experiment-setup ; this is called by the "setup" main procedure 
  
  setup-environment
  set confinement-behaviour? false ; if TRUE, the AUVs try to stay inside a certain distance to the (nearest) basestation (= vitual fence).
  set stop-on-obstacle-collisions? true ; if TRUE, the AUV stops when it is located on a borderpatch or a groundpatch
  set print-AUV-collisions? false ; if TRUE, the simulation prints the turtle identifier and "collision" string in the command center if two AUVs are located on the same patch
  
  set make-ground-terrain? true
  set make-ground-dell? true
  
  set make-borders? true
  set make-watersurface? false
  set water-level 20 ; z-coordinate of the water surface above the bottom;  
  
  set use-blackbox? true ;if TRUE, a black-box is being created, which produces an electrical field.
  
  core-setup-world ; the world (ground, water, water surface, borders) is created; must exist after set waterlevel & number-auvs
  ;core-setup-shapes ; the shapes of the different AUVs is loaded
  core-setup-physics ; physical parameters of the world and the AUVs are loaded
  
  experiment-setup-robots ; robots are set up and created
  set number-of-all-robots (count AUVs-DUMMY) ;; a convenience variable that holds the total number of AUV robot
  
  
  ifelse make-ground-terrain? 
  [
    ifelse  make-ground-dell? = true
    [core-make-ground-dell]
    [core-make-ground-terrain]
  ]
  [ ;; if the terrain on bottom of tank is not to be created, however the bottom of the tank is still solid. 
    ask patches with [ pzcor = min-pzcor ]
    [
      set ground? true 
      set pcolor brown
    ]
  ]
  
  
end


to experiment-setup-robots
  
  repeat 30 ; this number defines the number of a certain AUV type that should be created
  [
    ;robotmodel-create-AUV-DUMMY one-of patches with [water? and (count turtles-here = 0) and (pzcor < 0.6 * max-pzcor) and (pzcor > 0.4 * max-pzcor) and (pxcor > 0.2 * max-pxcor) and (pxcor < 0.8 * max-pxcor) and (pycor > 0.2 * max-pycor) and (pycor < 0.8 * max-pycor)] ; USTUTT AUVs are created and placed on random water patches at a certain depth in the upper right corner of the tank]
    robotmodel-create-AUV-DUMMY one-of patches with [water? and (count turtles-here = 0) ]
  ]  
  
  ask AUVs-DUMMY [HAL-setup] ; the HAL is initialized
  ask AUVs-DUMMY [Controller-setup] ; the controller is initialized

  ;robotmodel-create-basestation-DUMMY patch 0 0 water-level ; 1 basestation DUMMY is created in the middle on the water surface; as of now it is set to (is-robot? = false) because it does not have any sensors or actuators yet and it does not have the same sensors as the AUVs
  
  
  ;blackbox creation---------------------------------------------------------------------------------------------------------------------------------------------------
  ;DIRTY HACK----------------------------------------------------------------------------------------------------------------------------------------------------------
  
    if use-blackbox? = true
  [
    
    ask patch 0 0 0 [sprout-black-boxes 1 ]   ;blackbox is created
    ask black-boxes 
    [
       set is-robot? false
       set shape "box"
       set color black
       Ask patch-here [set electric-value 100]
    ]
  
     ask patches with [water? = true]
       [
          let neighbor-with-max-electric (max-one-of patches in-radius-nowrap 2 [electric-value]) 
          let value-of-neighbor-with-max-electric ([electric-value] of neighbor-with-max-electric)
          
          if electric-value < value-of-neighbor-with-max-electric
          [set electric-value value-of-neighbor-with-max-electric - 10]
       ]
    
;    ask patches with [electric-value > 0]
;    [set pcolor scale-color green electric-value 0 100]
    
    
    
  ]
  ;---------------------------------------------------------------------------------------------------------------------------------------------------
  ;----------------------------------------------------------------------------------------------------------------------------------------------------------
  
  set all-robots (turtles with [is-robot?]) ; all the robots (= different AUV types + base stations) are put into an agentset; used for interaction with agents 
end


to experiment-startup ; function has to exist; called once the go button is pressed, after the arena and the robots are created
  
  if (confinement-behaviour?) ; if the confinement-behaviour is set to TRUE in the experiment.nls, set some things for evaluation 
    [
    ask water-surfaces with [(distancexy 0 0) > (0.7 * 30)] [set color yellow]
    ask water-surfaces with [(distancexy 0 0) > 30] [set color white]
    reset-perspective
    ]
   
end


to experiment-go-first ; function has to exist; before all turtles and patches have acted
end 


to experiment-go-last ; function has to exist; after all turtles and patches have acted 
end 



to experiment-update-world ; function has to exist; here all the things that happen each tick in the environment should be performed
end

